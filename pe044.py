from collections import *
from itertools import *
from random import *
from time import *
from functools import *
from fractions import *
from math import *

#from pe_lib import PrimeSieve

'''
Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. 
The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. 
However, their difference, 70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference 
are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?
'''

# returns floor(sqrt(n)) up to n <= 10^24
def sqrt(n):
    x = int(n**.5 + .5)
    if x*x>n: x-=1
    return x

def ispenta(n):
    check = 1+24*n
    sq = sqrt(check)
    return sq**2 == 1+24*n and (1+sq)%6 == 0

def main():
    p = [1, 5, 12, 22, 35, 51, 70, 92, 117, 145]
    n = 11
    D = float('inf')
    while True:
        nextp = n*(3*n-1)//2
        #print(nextp)
        for pn in reversed(p):
            if nextp-pn > D:
                break
            if ispenta(nextp+pn) and ispenta(nextp-pn):
                D = min(D, nextp-pn)
                print(D)
                break
        p.append(nextp)
        n += 1
        if p[-1]-p[-2] > D:
            return D
            
start = time()
print('\n\n')
print(main())
print('Program took %.02f seconds' % (time()-start))

def other():
    p = lambda i: i*(3*i-1)//2
    pp = set()
    best = float('inf')
    t = 0
    for i in count():
        if p(i)-p(i-1) >= best: break
        while p(t) <= 2*p(i):
            pp.add(p(t))
            t += 1
        for j in range(i-1, 0, -1):
            d = p(i) - p(j)
            if d >= best: break
            if d not in pp: continue
            s = p(i) + p(j)
            if s not in pp: continue
            best = d
            print('P(%d) - P(%d) = %d' % (i, j, d))
            
start = time()
print('\n\n')
print(other())
print('Program took %.02f seconds' % (time()-start))